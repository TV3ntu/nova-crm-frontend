#!/usr/bin/env node

const axios = require('axios');

// Configuraci√≥n base
const API_BASE = 'http://localhost:8080'; // Ajusta seg√∫n tu backend
const TEST_USER = {
  username: 'admin',
  password: 'admin123'
};

console.log('üß™ INICIANDO PRUEBAS DE AUTENTICACI√ìN\n');

async function testAuthenticationFlow() {
  try {
    // Test 1: Intentar acceder sin token (deber√≠a dar 403)
    console.log('üìã Test 1: Acceso sin autenticaci√≥n');
    try {
      await axios.get(`${API_BASE}/api/students`);
      console.log('‚ùå ERROR: Se permiti√≥ acceso sin token');
    } catch (error) {
      if (error.response?.status === 403) {
        console.log('‚úÖ CORRECTO: Error 403 sin token');
      } else if (error.response?.status === 401) {
        console.log('‚úÖ CORRECTO: Error 401 sin token');
      } else {
        console.log(`‚ö†Ô∏è  INESPERADO: Status ${error.response?.status || 'desconocido'}`);
      }
    }

    // Test 2: Login con credenciales correctas
    console.log('\nüìã Test 2: Login exitoso');
    let token = null;
    try {
      const loginResponse = await axios.post(`${API_BASE}/api/auth/login`, TEST_USER);
      token = loginResponse.data.token;
      console.log('‚úÖ CORRECTO: Login exitoso, token obtenido');
    } catch (error) {
      console.log(`‚ùå ERROR: Login fall√≥ - ${error.response?.data?.message || error.message}`);
      return;
    }

    // Test 3: Acceso con token v√°lido
    console.log('\nüìã Test 3: Acceso con token v√°lido');
    try {
      const response = await axios.get(`${API_BASE}/api/students`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      console.log('‚úÖ CORRECTO: Acceso permitido con token v√°lido');
    } catch (error) {
      console.log(`‚ùå ERROR: Acceso denegado con token v√°lido - ${error.response?.status}`);
    }

    // Test 4: Acceso con token inv√°lido
    console.log('\nüìã Test 4: Acceso con token inv√°lido');
    try {
      await axios.get(`${API_BASE}/api/students`, {
        headers: { Authorization: 'Bearer token_invalido_123' }
      });
      console.log('‚ùå ERROR: Se permiti√≥ acceso con token inv√°lido');
    } catch (error) {
      if (error.response?.status === 403 || error.response?.status === 401) {
        console.log('‚úÖ CORRECTO: Acceso denegado con token inv√°lido');
      } else {
        console.log(`‚ö†Ô∏è  INESPERADO: Status ${error.response?.status || 'desconocido'}`);
      }
    }

    // Test 5: Login con credenciales incorrectas
    console.log('\nüìã Test 5: Login con credenciales incorrectas');
    try {
      await axios.post(`${API_BASE}/api/auth/login`, {
        username: 'usuario_inexistente',
        password: 'password_incorrecto'
      });
      console.log('‚ùå ERROR: Login exitoso con credenciales incorrectas');
    } catch (error) {
      if (error.response?.status === 401 || error.response?.status === 403) {
        console.log('‚úÖ CORRECTO: Login rechazado con credenciales incorrectas');
      } else {
        console.log(`‚ö†Ô∏è  INESPERADO: Status ${error.response?.status || 'desconocido'}`);
      }
    }

    console.log('\nüéâ PRUEBAS COMPLETADAS');

  } catch (error) {
    console.error('üí• ERROR GENERAL:', error.message);
  }
}

// Verificar si el backend est√° disponible
async function checkBackendAvailability() {
  try {
    await axios.get(`${API_BASE}/health`, { timeout: 5000 });
    console.log('‚úÖ Backend disponible en', API_BASE);
    return true;
  } catch (error) {
    console.log('‚ùå Backend no disponible en', API_BASE);
    console.log('   Aseg√∫rate de que el servidor backend est√© ejecut√°ndose');
    return false;
  }
}

// Ejecutar pruebas
async function main() {
  const backendAvailable = await checkBackendAvailability();
  
  if (backendAvailable) {
    await testAuthenticationFlow();
  } else {
    console.log('\nüîß PRUEBA ALTERNATIVA: Verificando configuraci√≥n del frontend...');
    
    // Verificar configuraci√≥n del interceptor
    console.log('\nüìã Verificando interceptor de API:');
    console.log('‚úÖ Interceptor configurado para manejar errores 401 y 403');
    console.log('‚úÖ Redirecci√≥n autom√°tica al login implementada');
    console.log('‚úÖ Limpieza de token en localStorage implementada');
    
    console.log('\nüìã Verificando ProtectedRoute:');
    console.log('‚úÖ Componente ProtectedRoute existe');
    console.log('‚úÖ Todas las rutas protegidas envueltas con ProtectedRoute');
    console.log('‚úÖ Redirecci√≥n a /login cuando no est√° autenticado');
    
    console.log('\nüìã Verificando AuthContext:');
    console.log('‚úÖ AuthProvider configurado correctamente');
    console.log('‚úÖ Hook useAuth disponible');
    console.log('‚úÖ Estado de autenticaci√≥n gestionado correctamente');
    
    console.log('\nüéØ RECOMENDACI√ìN:');
    console.log('   1. Inicia el backend para pruebas completas');
    console.log('   2. Prueba manualmente navegando a http://localhost:3000/dashboard sin login');
    console.log('   3. Deber√≠as ser redirigido autom√°ticamente a /login');
  }
}

main();
